package generated;
import java_cup.runtime.*;
import java.util.*;
import java.lang.Boolean;
import Node.*;
import Operation.*;
import Statement.*;

class Parser;

parser code{:

    public void report_error(String msg, Object info) {
      Symbol sym = (Symbol)info;
      System.out.println(msg + ": " + symbl_name_from_id(sym.sym));
    }

    public void syntax_error(Symbol s){
        System.out.println("compiler has detected a syntax error at line " + s.left
            + " column " + s.right);
    }

:}

/*Terminal*/
terminal String MAIN,
                ID,
               	INTEGER,
               	STRING,
               	REAL,
               	BOOL,
               	LPAR,
               	RPAR,
               	COLON,
               	FUN,
               	END,
               	IF,
               	THEN,
               	ELSE,
               	WHILE,
               	LOOP,
               	READ,
               	WRITE,
               	WRITELN,
               	WRITEB,
               	WRITET,
               	ASSIGN,
               	PLUS,
               	MINUS,
               	TIMES,
               	DIVINT,
               	DIV,
               	POW,
               	STR_CONCAT,
               	EQ,
               	NE,
               	LT,
               	LE,
               	GT,
               	GE,
               	AND,
               	OR,
               	NOT,
               	NULL,
               	STRING_CONST,
                SEMI,
               	COMMA,
               	RETURN,
               	OUTPAR,
               	OUT,
               	VAR;

terminal String INTEGER_CONST;
terminal String REAL_CONST;
terminal String TRUE, FALSE;

//Non terminali

non terminal      ProgramOp       	             Program;
non terminal      VarDeclListOp                  VarDeclList;
non terminal      MainOp                         Main;
non terminal      ProcListOp                     FunList;
non terminal      VarDeclOp                      VarDecl;
non terminal      TypeOp                         Type;
non terminal      IdListInitOp                   IdListInit;
non terminal      IdListInitOp                   IdListInitObbl;
non terminal      ExprOp                         Const ;
non terminal      ProcOp                         Fun;
non terminal      ParamDeclListOp                ParamDeclList;
non terminal      ParamDeclListOp                NonEmptyParamDeclList ;
non terminal      ParDeclOp                      ParDecl;
non terminal      StatListOp                     StatList;
non terminal      StatOp                         Stat;
non terminal      IfStatOp                       IfStat;
non terminal      ElseOp                         Else;
non terminal      WhileStatOp                    WhileStat;
non terminal      ReadStatOp                     ReadStat;
non terminal      WriteStatOp                    WriteStat;
non terminal      AssignStatOp                   AssignStat;
non terminal      CallProcOp                     CallFun;
non terminal      ExprListOp                     ExprList;
non terminal      ExprOp                         Expr;
non terminal      IdListOp                       IdList;

// Precendenze:: partendo dal basso (precedenza maggiore) a salire (precedenza minore)
precedence left OR;
precedence left AND;
precedence right NOT;
precedence nonassoc EQ, NE, LT, LE, GT, GE;
precedence left STR_CONCAT;
precedence left PLUS, MINUS;
precedence left TIMES,DIV, DIVINT;
precedence right POW;
precedence left LPAR, RPAR;

//Program ::= VarDeclList FunList MainOp
    Program ::= VarDeclList:vars FunList:funlist Main:main {:RESULT = new ProgramOp(vars,funlist,main);:};

/*VarDeclList ::= *//* empty *//*
*//*	| VardDecl VarDeclList*/
    VarDeclList ::= {:RESULT = new VarDeclListOp(new ArrayList<VarDeclOp>());:}
        |VarDecl:varDecl VarDeclList:varDecList {:RESULT = varDecList.add(varDecl);:};

//MainOp ::= MAIN VarDeclList StatList END MAIN SEMI
    Main ::= MAIN VarDeclList:vars StatList:stats END MAIN SEMI {:RESULT = new MainOp(vars,stats);:};

/*FunList ::= *//* empty *//*
*//*	| Fun FunList*/
    FunList ::= {:RESULT = new ProcListOp(new ArrayList<ProcOp>());:}
        	| Fun:f FunList:list {:RESULT = list.add(f);:};

/*VarDecl ::= Type IdListInit SEMI
    | VAR IdListInitObbl SEMI*/

    VarDecl ::= Type:t IdListInit:list SEMI {:RESULT = new VarDeclOp(t, list);:}
            | VAR IdListInitObbl:list SEMI {: RESULT = new VarDeclOp(new TypeOp("var"),list);:};

//Type ::= INTEGER | REAL | STRING | BOOL

    Type ::= INTEGER:i {:RESULT = new TypeOp("integer");:}
            | BOOL:b {:RESULT = new TypeOp("bool");:}
            | REAL:r {:RESULT = new TypeOp("real");:}
            | STRING:s {:RESULT = new TypeOp("string");:};

/*IdListInit ::= ID
        | IdListInit COMMA ID
        | ID ASSIGN Expr
        | IdListInit COMMA ID ASSIGN Expr*/

    IdListInit ::= ID:id
            {:
                HashMap<String,ExprOp> list = new HashMap<String,ExprOp>();
                list.put(id,new ExprOp((Operations) null));
                RESULT = new IdListInitOp(list);
            :}
            | IdListInit:list COMMA ID:id {:RESULT = list.put(id,new ExprOp((Operations) null));:}
            | ID:id ASSIGN Expr:e
            {:
                 HashMap<String,ExprOp> list = new HashMap<String,ExprOp>();
                 list.put(id,e);
                 RESULT = new IdListInitOp(list);
             :}
            | IdListInit:list COMMA ID:id ASSIGN Expr:e
            {:
                 RESULT = list.put(id,e);
            :}
            ;

/*IdListInitObbl ::= ID ASSIGN Const
    | IdListInitObbl COMMA ID ASSIGN Const*/
    IdListInitObbl ::= ID:id ASSIGN Const:c
            {:
                HashMap<String,ExprOp> list = new HashMap<String,ExprOp>();
                list.put(id,c);
                RESULT = new IdListInitOp(list);
            :}
            | IdListInitObbl:list COMMA ID:id ASSIGN Const:c
            {:
                 RESULT = list.put(id,c);
            :}
            ;

//Const ::= INTEGER_CONST | REAL_CONST | STRING_CONST | TRUE | FALSE
    Const ::= INTEGER_CONST:intConst {:RESULT = new ExprOp(Integer.parseInt(intConst));:}
                | REAL_CONST:realConst {:RESULT = new ExprOp(Float.parseFloat(realConst));:}
                | STRING_CONST:stringConst {:RESULT = new ExprOp(stringConst);:}
                | TRUE:value {:RESULT = new ExprOp(Boolean.getBoolean(value));:}
                | FALSE:value {:RESULT = new ExprOp(Boolean.getBoolean(value));:};

/*Fun ::= FUN ID LPAR ParamDeclList RPAR COLON Type
            VarDeclList StatList END FUN SEMI
        | FUN ID LPAR ParamDeclList RPAR
            VarDeclList StatList END FUN SEMI*/

    Fun ::= FUN ID:id LPAR ParamDeclList:list RPAR COLON Type:t
                VarDeclList:vars StatList:stats END FUN SEMI {:RESULT = new ProcOp(new Id(id),list,t, vars, stats);:}
            | FUN ID:id LPAR ParamDeclList:list RPAR
                VarDeclList:vars StatList:stats END FUN SEMI {:RESULT = new ProcOp(new Id(id),list, vars, stats);:};

/*ParamDeclList ::= *//*empty *//*
*//*	| NonEmptyParamDeclList*/

    ParamDeclList ::= {: ArrayList<ParDeclOp> l = new ArrayList<ParDeclOp>();:}
        | NonEmptyParamDeclList:list {:RESULT = list;:};

/*NonEmptyParamDeclList ::= ParDecl
    | NonEmptyParamDeclList COMMA ParDecl*/

    NonEmptyParamDeclList ::= ParDecl:par
        {: ArrayList<ParDeclOp> l = new ArrayList<ParDeclOp>();
         l.add(0,par);
         RESULT = new ParamDeclListOp(l);
        :}
        | NonEmptyParamDeclList:list COMMA ParDecl:par {: RESULT = list.add(par);:}
        ;

/*ParDecl ::= Type ID
    | OUT Type ID*/

    ParDecl ::= Type:t ID:id {:RESULT = new ParDeclOp(t,new Id(id)); :}
        | OUT Type:t ID:id {:RESULT = new ParDeclOp("OUT",t,new Id(id)); :};

//STATEMENT

/*StatList ::= Stat StatList
        | EMPTY*/

StatList ::= Stat:stat StatList:list
            {:
                if(stat != null){
                RESULT = list.add(stat);
                }
                else {
                    RESULT = new StatListOp();
                }
            :}
            | {: RESULT = new StatListOp();:}
            ;


/*Statement ::= IfStatement SEMI
        | WhileStatement SEMI
        | ReadStatement SEMI
        | WriteStatement SEMI
        | AssignStatement SEMI
        | CallFun SEMI
        | RETURN Expr SEMI*/

Stat::=	AssignStat:assign SEMI      {:RESULT = new StatOp(assign);:}
			|CallFun:call SEMI         {:RESULT = new StatOp(call);:}
            |ReadStat:read SEMI       {:RESULT = new StatOp(read);:}
            |WriteStat:write SEMI       {:RESULT = new StatOp(write);:}
            |WhileStat:whileStat SEMI   {:RESULT = new StatOp(whileStat);:}
            |IfStat:ifStat SEMI	        {:RESULT = new StatOp(ifStat);:}
            |RETURN Expr:e SEMI          {:RESULT = new StatOp(new ReturnStatOp(e));:}
			;

//IfStatement ::= IF Expr THEN VarDeclList StatList ElseStatement END IF
IfStat ::= IF Expr:e THEN VarDeclList:vars StatList:statList Else:elseStat END IF {:RESULT = new IfStatOp(e,vars,statList,elseStat);:}
           ;

//ElseStatement ::= /* empty */
// | ELSE VarDeclList  StatList
Else ::= {:RESULT = null;:} //empty
         |ELSE VarDeclList:vars StatList:list {:RESULT = new ElseOp(vars,list);:}
         ;

/*WhileStat ::= WHILE Expr LOOP VarDeclList  StatList END LOOP*/
WhileStat ::= WHILE Expr:e LOOP VarDeclList:vars StatList:list END LOOP {:RESULT = new WhileStatOp(e,vars,list);:};

/*ReadStat ::= READ IdList Expr // Expr deve essere di tipo stringa
        | READ IdList*/

ReadStat ::= READ IdList:list Expr:e  {:RESULT = new ReadStatOp(list,e);:}
                | READ IdList:list {:RESULT = new ReadStatOp(list);:}
                ;

/*IdList ::= ID
        | IdList COMMA ID*/
IdList ::= ID:id {:
           ArrayList<String> l = new ArrayList<String>();
           l.add(0,id);
           RESULT = new IdListOp(l);
        :}
        |IdList:list COMMA ID:id {:RESULT = list.add(id);:}
        ;
/*WriteStatement ::=  WRITE  Expr
        | WRITELN  Expr
        | WRITET  Expr
        | WRITEB  Expr*/
WriteStat ::= WRITE Expr:expr {:RESULT = new WriteStatOp(expr,"WRITE_");:}
            | WRITELN Expr:expr {:RESULT = new WriteStatOp(expr,"WRITE_LN");:}
            | WRITET Expr:expr {:RESULT = new WriteStatOp(expr,"WRITE_T");:}
            | WRITEB Expr:expr {:RESULT = new WriteStatOp(expr,"WRITE_B");:}
                ;
//AssignStat ::=  ID ASSIGN Expr
AssignStat ::= ID:id ASSIGN Expr:expr {:RESULT = new AssignStatOp(new Id(id),expr);:}
                ;

//CHIAMATA PROCEDURA
/*    CallFun ::= ID LPAR ExprList RPAR
        | ID LPAR RPAR*/

CallFun ::=    ID:id LPAR ExprList:list RPAR {:RESULT = new CallProcOp(id,list);:}
            |ID:id LPAR RPAR   {:RESULT = new CallProcOp(id);:}
            ;

//ESPRESSIONI

/*ExprList ::= Expr
        | Expr COMMA ExprList
        | OUTPAR ID
        | OUTPAR ID COMMA ExprList*/

ExprList ::= Expr:e1
            {:
                ArrayList<ExprOp> l = new ArrayList<ExprOp>();
                l.add(0,e1);
                RESULT = new ExprListOp(l);
            :}
        | Expr:e1 COMMA ExprList:list {: RESULT = list.add(e1); :}
        | OUTPAR ID:id
            {: ArrayList<ExprOp> l = new ArrayList<ExprOp>();
               l.add(0,new ExprOp(new Id(id)));
               RESULT = new ExprListOp(l);
            :}
        | OUTPAR ID:id COMMA ExprList:list {: RESULT = list.add(new ExprOp(new Id(id)));:}
        ;

/*Expr ::= TRUE
        | FALSE
        | INTEGER_CONST
        | REAL_CONST
        | STRING_CONST
        | ID
        | CallFun
        | Expr  PLUS Expr
        | Expr  MINUS Expr
        | Expr  TIMES Expr
        | Expr  DIV Expr
        | Expr  DIVINT Expr
        | Expr  AND Expr
        | Expr POW Expr
        | Expr STR_CONCAT Expr
        | Expr  OR Expr
        | Expr  GT Expr
        | Expr  GE Expr
        | Expr  LT Expr
        | Expr  LE Expr
        | Expr  EQ Expr
        | Expr  NE Expr
        | MINUS Expr
        | NOT Expr
        | LPAR Expr RPAR*/

Expr ::= TRUE:value {:RESULT = new ExprOp(Boolean.getBoolean(value));:}
        |FALSE:value {:RESULT = new ExprOp(Boolean.getBoolean(value));:}
        |INTEGER_CONST:intConst {:RESULT = new ExprOp(Integer.parseInt(intConst));:}
        |REAL_CONST:realConst {:RESULT = new ExprOp(Float.parseFloat(realConst));:}
        |STRING_CONST:string {:RESULT = new ExprOp(string);:}
        |ID:id  {:RESULT = new ExprOp(new Id(id));:}
        |Expr:e1 PLUS Expr:e2 {:RESULT = new ExprOp(new AddOp(e1,e2));:}
        |Expr:e1 MINUS Expr:e2  {:RESULT = new ExprOp(new DiffOp(e1,e2));:}
        |Expr:e1 TIMES Expr:e2  {:RESULT = new ExprOp(new MulOp(e1,e2));:}
        |Expr:e1 DIV Expr:e2    {:RESULT = new ExprOp(new DivOp(e1,e2));:}
        |Expr:e1 DIVINT Expr:e2    {:RESULT = new ExprOp(new DivIntOp(e1,e2));:}
        |Expr:e1 AND Expr:e2  {:RESULT = new ExprOp(new AndOp(e1,e2));:}
        |Expr:e1 OR Expr:e2   {:RESULT = new ExprOp(new OrOp(e1,e2));:}
        |Expr:e1 GT Expr:e2   {:RESULT = new ExprOp(new GtOp(e1,e2));:}
        |Expr:e1 GE Expr:e2   {:RESULT = new ExprOp(new GeOp(e1,e2));:}
        |Expr:e1 LT Expr:e2   {:RESULT = new ExprOp(new LtOp(e1,e2));:}
        |Expr:e1 LE Expr:e2   {:RESULT = new ExprOp(new LeOp(e1,e2));:}
        |Expr:e1 EQ Expr:e2   {:RESULT = new ExprOp(new EqOp(e1,e2));:}
        |Expr:e1 NE Expr:e2   {:RESULT = new ExprOp(new NeOp(e1,e2));:}
        |Expr:e1 POW Expr:e2   {:RESULT = new ExprOp(new PowOp(e1,e2));:}
        |Expr:e1 STR_CONCAT Expr:e2   {:RESULT = new ExprOp(new StrConcatOp(e1,e2));:}
        |MINUS Expr:e1  {:RESULT = new ExprOp(new DiffOp(e1));:}
        |LPAR Expr:e1 RPAR   {:RESULT = new ExprOp(new FunctionParamOp(e1));:}
        |NOT Expr:e           {:RESULT = new ExprOp(new NotOp(e));:}
        |CallFun:c           {:RESULT = new ExprOp(c);:}
        ;