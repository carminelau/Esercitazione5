
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package generated;

import java_cup.runtime.*;
import java.util.*;
import java.lang.Boolean;
import Node.*;
import Operation.*;
import Statement.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\005\000\002\002\004\000\002\003" +
    "\002\000\002\003\004\000\002\004\010\000\002\005\002" +
    "\000\002\005\004\000\002\006\005\000\002\006\005\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\010\003\000\002\010\005\000\002\010" +
    "\005\000\002\010\007\000\002\011\005\000\002\011\007" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\013\016\000\002" +
    "\013\014\000\002\014\002\000\002\014\003\000\002\015" +
    "\003\000\002\015\005\000\002\016\004\000\002\016\005" +
    "\000\002\017\004\000\002\017\002\000\002\020\004\000" +
    "\002\020\004\000\002\020\004\000\002\020\004\000\002" +
    "\020\004\000\002\020\004\000\002\020\005\000\002\021" +
    "\012\000\002\022\002\000\002\022\005\000\002\023\011" +
    "\000\002\024\005\000\002\024\004\000\002\032\003\000" +
    "\002\032\005\000\002\025\004\000\002\025\004\000\002" +
    "\025\004\000\002\025\004\000\002\026\005\000\002\027" +
    "\006\000\002\027\005\000\002\030\003\000\002\030\005" +
    "\000\002\030\004\000\002\030\006\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\004\000\002\031\005\000\002\031\004" +
    "\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\020\004\uffff\006\006\007\012\010\014\011" +
    "\010\015\uffff\061\013\001\002\000\004\005\254\001\002" +
    "\000\004\002\253\001\002\000\040\005\ufff8\006\ufff8\007" +
    "\ufff8\010\ufff8\011\ufff8\016\ufff8\017\ufff8\022\ufff8\024\ufff8" +
    "\025\ufff8\026\ufff8\027\ufff8\030\ufff8\056\ufff8\061\ufff8\001" +
    "\002\000\006\004\ufffc\015\035\001\002\000\040\005\ufff7" +
    "\006\ufff7\007\ufff7\010\ufff7\011\ufff7\016\ufff7\017\ufff7\022" +
    "\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\056\ufff7" +
    "\061\ufff7\001\002\000\046\004\uffff\005\uffff\006\006\007" +
    "\012\010\014\011\010\015\uffff\016\uffff\017\uffff\021\uffff" +
    "\022\uffff\024\uffff\025\uffff\026\uffff\027\uffff\030\uffff\056" +
    "\uffff\061\013\001\002\000\040\005\ufff5\006\ufff5\007\ufff5" +
    "\010\ufff5\011\ufff5\016\ufff5\017\ufff5\022\ufff5\024\ufff5\025" +
    "\ufff5\026\ufff5\027\ufff5\030\ufff5\056\ufff5\061\ufff5\001\002" +
    "\000\004\005\015\001\002\000\040\005\ufff6\006\ufff6\007" +
    "\ufff6\010\ufff6\011\ufff6\016\ufff6\017\ufff6\022\ufff6\024\ufff6" +
    "\025\ufff6\026\ufff6\027\ufff6\030\ufff6\056\ufff6\061\ufff6\001" +
    "\002\000\004\031\031\001\002\000\006\054\020\055\017" +
    "\001\002\000\004\005\021\001\002\000\046\004\ufff9\005" +
    "\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\015\ufff9\016\ufff9" +
    "\017\ufff9\021\ufff9\022\ufff9\024\ufff9\025\ufff9\026\ufff9\027" +
    "\ufff9\030\ufff9\056\ufff9\061\ufff9\001\002\000\004\031\022" +
    "\001\002\000\014\053\023\062\024\063\026\064\025\065" +
    "\027\001\002\000\006\054\uffec\055\uffec\001\002\000\006" +
    "\054\uffee\055\uffee\001\002\000\006\054\uffeb\055\uffeb\001" +
    "\002\000\006\054\uffed\055\uffed\001\002\000\006\054\uffea" +
    "\055\uffea\001\002\000\006\054\uffef\055\uffef\001\002\000" +
    "\014\053\023\062\024\063\026\064\025\065\027\001\002" +
    "\000\006\054\ufff0\055\ufff0\001\002\000\034\004\ufffe\005" +
    "\ufffe\015\ufffe\016\ufffe\017\ufffe\021\ufffe\022\ufffe\024\ufffe" +
    "\025\ufffe\026\ufffe\027\ufffe\030\ufffe\056\ufffe\001\002\000" +
    "\006\004\ufffc\015\035\001\002\000\004\005\221\001\002" +
    "\000\004\004\037\001\002\000\040\005\uffff\006\006\007" +
    "\012\010\014\011\010\016\uffff\017\uffff\022\uffff\024\uffff" +
    "\025\uffff\026\uffff\027\uffff\030\uffff\056\uffff\061\013\001" +
    "\002\000\004\002\001\001\002\000\026\005\054\016\uffe0" +
    "\017\051\022\043\024\042\025\055\026\046\027\062\030" +
    "\044\056\060\001\002\000\004\005\214\001\002\000\024" +
    "\005\074\012\071\033\063\051\075\053\066\062\073\063" +
    "\064\064\067\065\072\001\002\000\024\005\074\012\071" +
    "\033\063\051\075\053\066\062\073\063\064\064\067\065" +
    "\072\001\002\000\004\054\204\001\002\000\024\005\074" +
    "\012\071\033\063\051\075\053\066\062\073\063\064\064" +
    "\067\065\072\001\002\000\004\054\202\001\002\000\004" +
    "\054\201\001\002\000\024\005\074\012\071\033\063\051" +
    "\075\053\066\062\073\063\064\064\067\065\072\001\002" +
    "\000\004\054\166\001\002\000\004\016\163\001\002\000" +
    "\006\012\135\031\161\001\002\000\024\005\074\012\071" +
    "\033\063\051\075\053\066\062\073\063\064\064\067\065" +
    "\072\001\002\000\004\054\157\001\002\000\030\005\054" +
    "\016\uffe0\017\051\021\uffe0\022\043\024\042\025\055\026" +
    "\046\027\062\030\044\056\060\001\002\000\024\005\074" +
    "\012\071\033\063\051\075\053\066\062\073\063\064\064" +
    "\067\065\072\001\002\000\004\054\153\001\002\000\024" +
    "\005\074\012\071\033\063\051\075\053\066\062\073\063" +
    "\064\064\067\065\072\001\002\000\024\005\074\012\071" +
    "\033\063\051\075\053\066\062\073\063\064\064\067\065" +
    "\072\001\002\000\052\013\uffc2\020\uffc2\023\uffc2\032\uffc2" +
    "\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041" +
    "\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2" +
    "\050\uffc2\054\uffc2\055\uffc2\001\002\000\042\032\103\033" +
    "\077\034\110\035\115\036\106\037\101\040\112\041\104" +
    "\042\111\043\113\044\105\045\107\046\102\047\100\050" +
    "\114\054\uffcd\001\002\000\052\013\uffc1\020\uffc1\023\uffc1" +
    "\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040" +
    "\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1" +
    "\047\uffc1\050\uffc1\054\uffc1\055\uffc1\001\002\000\052\013" +
    "\uffc5\020\uffc5\023\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5" +
    "\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044" +
    "\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\054\uffc5\055\uffc5" +
    "\001\002\000\052\013\uffad\020\uffad\023\uffad\032\uffad\033" +
    "\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad" +
    "\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050" +
    "\uffad\054\uffad\055\uffad\001\002\000\024\005\074\012\071" +
    "\033\063\051\075\053\066\062\073\063\064\064\067\065" +
    "\072\001\002\000\052\013\uffc4\020\uffc4\023\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041" +
    "\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4" +
    "\050\uffc4\054\uffc4\055\uffc4\001\002\000\052\013\uffc3\020" +
    "\uffc3\023\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3" +
    "\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045" +
    "\uffc3\046\uffc3\047\uffc3\050\uffc3\054\uffc3\055\uffc3\001\002" +
    "\000\054\012\135\013\uffc0\020\uffc0\023\uffc0\032\uffc0\033" +
    "\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0" +
    "\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050" +
    "\uffc0\054\uffc0\055\uffc0\001\002\000\024\005\074\012\071" +
    "\033\063\051\075\053\066\062\073\063\064\064\067\065" +
    "\072\001\002\000\052\013\uffae\020\uffae\023\uffae\032\103" +
    "\033\077\034\110\035\115\036\106\037\101\040\112\041" +
    "\104\042\111\043\113\044\105\045\107\046\102\047\uffae" +
    "\050\uffae\054\uffae\055\uffae\001\002\000\024\005\074\012" +
    "\071\033\063\051\075\053\066\062\073\063\064\064\067" +
    "\065\072\001\002\000\024\005\074\012\071\033\063\051" +
    "\075\053\066\062\073\063\064\064\067\065\072\001\002" +
    "\000\024\005\074\012\071\033\063\051\075\053\066\062" +
    "\073\063\064\064\067\065\072\001\002\000\024\005\074" +
    "\012\071\033\063\051\075\053\066\062\073\063\064\064" +
    "\067\065\072\001\002\000\024\005\074\012\071\033\063" +
    "\051\075\053\066\062\073\063\064\064\067\065\072\001" +
    "\002\000\024\005\074\012\071\033\063\051\075\053\066" +
    "\062\073\063\064\064\067\065\072\001\002\000\024\005" +
    "\074\012\071\033\063\051\075\053\066\062\073\063\064" +
    "\064\067\065\072\001\002\000\024\005\074\012\071\033" +
    "\063\051\075\053\066\062\073\063\064\064\067\065\072" +
    "\001\002\000\024\005\074\012\071\033\063\051\075\053" +
    "\066\062\073\063\064\064\067\065\072\001\002\000\024" +
    "\005\074\012\071\033\063\051\075\053\066\062\073\063" +
    "\064\064\067\065\072\001\002\000\024\005\074\012\071" +
    "\033\063\051\075\053\066\062\073\063\064\064\067\065" +
    "\072\001\002\000\024\005\074\012\071\033\063\051\075" +
    "\053\066\062\073\063\064\064\067\065\072\001\002\000" +
    "\024\005\074\012\071\033\063\051\075\053\066\062\073" +
    "\063\064\064\067\065\072\001\002\000\024\005\074\012" +
    "\071\033\063\051\075\053\066\062\073\063\064\064\067" +
    "\065\072\001\002\000\024\005\074\012\071\033\063\051" +
    "\075\053\066\062\073\063\064\064\067\065\072\001\002" +
    "\000\052\013\uffbb\020\uffbb\023\uffbb\032\uffbb\033\uffbb\034" +
    "\uffbb\035\uffbb\036\uffbb\037\101\040\uffbb\041\uffbb\042\uffbb" +
    "\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\054" +
    "\uffbb\055\uffbb\001\002\000\052\013\uffb9\020\uffb9\023\uffb9" +
    "\032\103\033\077\034\110\035\115\036\106\037\101\040" +
    "\112\041\104\042\111\043\113\044\105\045\107\046\102" +
    "\047\100\050\uffb9\054\uffb9\055\uffb9\001\002\000\036\013" +
    "\uffb6\020\uffb6\023\uffb6\032\103\033\077\034\110\035\115" +
    "\036\106\037\101\040\112\047\uffb6\050\uffb6\054\uffb6\055" +
    "\uffb6\001\002\000\052\013\uffb1\020\uffb1\023\uffb1\032\103" +
    "\033\077\034\110\035\115\036\106\037\101\040\uffb1\041" +
    "\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1" +
    "\050\uffb1\054\uffb1\055\uffb1\001\002\000\036\013\uffb3\020" +
    "\uffb3\023\uffb3\032\103\033\077\034\110\035\115\036\106" +
    "\037\101\040\112\047\uffb3\050\uffb3\054\uffb3\055\uffb3\001" +
    "\002\000\052\013\uffbd\020\uffbd\023\uffbd\032\uffbd\033\uffbd" +
    "\034\uffbd\035\uffbd\036\uffbd\037\101\040\uffbd\041\uffbd\042" +
    "\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd" +
    "\054\uffbd\055\uffbd\001\002\000\036\013\uffb8\020\uffb8\023" +
    "\uffb8\032\103\033\077\034\110\035\115\036\106\037\101" +
    "\040\112\047\uffb8\050\uffb8\054\uffb8\055\uffb8\001\002\000" +
    "\052\013\uffbc\020\uffbc\023\uffbc\032\uffbc\033\uffbc\034\uffbc" +
    "\035\uffbc\036\uffbc\037\101\040\uffbc\041\uffbc\042\uffbc\043" +
    "\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\054\uffbc" +
    "\055\uffbc\001\002\000\036\013\uffb5\020\uffb5\023\uffb5\032" +
    "\103\033\077\034\110\035\115\036\106\037\101\040\112" +
    "\047\uffb5\050\uffb5\054\uffb5\055\uffb5\001\002\000\036\013" +
    "\uffb4\020\uffb4\023\uffb4\032\103\033\077\034\110\035\115" +
    "\036\106\037\101\040\112\047\uffb4\050\uffb4\054\uffb4\055" +
    "\uffb4\001\002\000\052\013\uffbf\020\uffbf\023\uffbf\032\uffbf" +
    "\033\uffbf\034\110\035\115\036\106\037\101\040\uffbf\041" +
    "\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf" +
    "\050\uffbf\054\uffbf\055\uffbf\001\002\000\036\013\uffb7\020" +
    "\uffb7\023\uffb7\032\103\033\077\034\110\035\115\036\106" +
    "\037\101\040\112\047\uffb7\050\uffb7\054\uffb7\055\uffb7\001" +
    "\002\000\052\013\uffb2\020\uffb2\023\uffb2\032\uffb2\033\uffb2" +
    "\034\uffb2\035\uffb2\036\uffb2\037\101\040\uffb2\041\uffb2\042" +
    "\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2" +
    "\054\uffb2\055\uffb2\001\002\000\052\013\uffba\020\uffba\023" +
    "\uffba\032\103\033\077\034\110\035\115\036\106\037\101" +
    "\040\112\041\104\042\111\043\113\044\105\045\107\046" +
    "\102\047\uffba\050\uffba\054\uffba\055\uffba\001\002\000\052" +
    "\013\uffbe\020\uffbe\023\uffbe\032\uffbe\033\uffbe\034\110\035" +
    "\115\036\106\037\101\040\uffbe\041\uffbe\042\uffbe\043\uffbe" +
    "\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\054\uffbe\055" +
    "\uffbe\001\002\000\030\005\074\012\071\013\141\033\063" +
    "\051\075\053\066\057\140\062\073\063\064\064\067\065" +
    "\072\001\002\000\044\013\uffc9\032\103\033\077\034\110" +
    "\035\115\036\106\037\101\040\112\041\104\042\111\043" +
    "\113\044\105\045\107\046\102\047\100\050\114\055\146" +
    "\001\002\000\004\013\145\001\002\000\004\005\142\001" +
    "\002\000\052\013\uffca\020\uffca\023\uffca\032\uffca\033\uffca" +
    "\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042" +
    "\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca" +
    "\054\uffca\055\uffca\001\002\000\006\013\uffc7\055\143\001" +
    "\002\000\026\005\074\012\071\033\063\051\075\053\066" +
    "\057\140\062\073\063\064\064\067\065\072\001\002\000" +
    "\004\013\uffc6\001\002\000\052\013\uffcb\020\uffcb\023\uffcb" +
    "\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040" +
    "\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb" +
    "\047\uffcb\050\uffcb\054\uffcb\055\uffcb\001\002\000\026\005" +
    "\074\012\071\033\063\051\075\053\066\057\140\062\073" +
    "\063\064\064\067\065\072\001\002\000\004\013\uffc8\001" +
    "\002\000\042\013\151\032\103\033\077\034\110\035\115" +
    "\036\106\037\101\040\112\041\104\042\111\043\113\044" +
    "\105\045\107\046\102\047\100\050\114\001\002\000\052" +
    "\013\uffaf\020\uffaf\023\uffaf\032\uffaf\033\uffaf\034\uffaf\035" +
    "\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf" +
    "\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\054\uffaf\055" +
    "\uffaf\001\002\000\052\013\uffb0\020\uffb0\023\uffb0\032\uffb0" +
    "\033\uffb0\034\110\035\115\036\106\037\101\040\uffb0\041" +
    "\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0" +
    "\050\uffb0\054\uffb0\055\uffb0\001\002\000\030\005\uffdd\016" +
    "\uffdd\017\uffdd\021\uffdd\022\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\056\uffdd\001\002\000\042\032\103\033" +
    "\077\034\110\035\115\036\106\037\101\040\112\041\104" +
    "\042\111\043\113\044\105\045\107\046\102\047\100\050" +
    "\114\054\155\001\002\000\030\005\uffd9\016\uffd9\017\uffd9" +
    "\021\uffd9\022\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\056\uffd9\001\002\000\006\016\uffe1\021\uffe1\001\002" +
    "\000\030\005\uffdc\016\uffdc\017\uffdc\021\uffdc\022\uffdc\024" +
    "\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\056\uffdc\001\002" +
    "\000\042\032\103\033\077\034\110\035\115\036\106\037" +
    "\101\040\112\041\104\042\111\043\113\044\105\045\107" +
    "\046\102\047\100\050\114\054\uffd0\001\002\000\024\005" +
    "\074\012\071\033\063\051\075\053\066\062\073\063\064" +
    "\064\067\065\072\001\002\000\042\032\103\033\077\034" +
    "\110\035\115\036\106\037\101\040\112\041\104\042\111" +
    "\043\113\044\105\045\107\046\102\047\100\050\114\054" +
    "\uffcc\001\002\000\004\004\164\001\002\000\004\054\165" +
    "\001\002\000\004\002\ufffd\001\002\000\030\005\uffdf\016" +
    "\uffdf\017\uffdf\021\uffdf\022\uffdf\024\uffdf\025\uffdf\026\uffdf" +
    "\027\uffdf\030\uffdf\056\uffdf\001\002\000\042\020\170\032" +
    "\103\033\077\034\110\035\115\036\106\037\101\040\112" +
    "\041\104\042\111\043\113\044\105\045\107\046\102\047" +
    "\100\050\114\001\002\000\042\005\uffff\006\006\007\012" +
    "\010\014\011\010\016\uffff\017\uffff\021\uffff\022\uffff\024" +
    "\uffff\025\uffff\026\uffff\027\uffff\030\uffff\056\uffff\061\013" +
    "\001\002\000\030\005\054\016\uffe0\017\051\021\uffe0\022" +
    "\043\024\042\025\055\026\046\027\062\030\044\056\060" +
    "\001\002\000\006\016\uffd7\021\173\001\002\000\040\005" +
    "\uffff\006\006\007\012\010\014\011\010\016\uffff\017\uffff" +
    "\022\uffff\024\uffff\025\uffff\026\uffff\027\uffff\030\uffff\056" +
    "\uffff\061\013\001\002\000\004\016\175\001\002\000\004" +
    "\017\176\001\002\000\004\054\uffd8\001\002\000\026\005" +
    "\054\016\uffe0\017\051\022\043\024\042\025\055\026\046" +
    "\027\062\030\044\056\060\001\002\000\004\016\uffd6\001" +
    "\002\000\030\005\uffde\016\uffde\017\uffde\021\uffde\022\uffde" +
    "\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\056\uffde\001" +
    "\002\000\030\005\uffda\016\uffda\017\uffda\021\uffda\022\uffda" +
    "\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\056\uffda\001" +
    "\002\000\042\032\103\033\077\034\110\035\115\036\106" +
    "\037\101\040\112\041\104\042\111\043\113\044\105\045" +
    "\107\046\102\047\100\050\114\054\uffcf\001\002\000\030" +
    "\005\uffdb\016\uffdb\017\uffdb\021\uffdb\022\uffdb\024\uffdb\025" +
    "\uffdb\026\uffdb\027\uffdb\030\uffdb\056\uffdb\001\002\000\042" +
    "\032\103\033\077\034\110\035\115\036\106\037\101\040" +
    "\112\041\104\042\111\043\113\044\105\045\107\046\102" +
    "\047\100\050\114\054\uffce\001\002\000\042\023\207\032" +
    "\103\033\077\034\110\035\115\036\106\037\101\040\112" +
    "\041\104\042\111\043\113\044\105\045\107\046\102\047" +
    "\100\050\114\001\002\000\040\005\uffff\006\006\007\012" +
    "\010\014\011\010\016\uffff\017\uffff\022\uffff\024\uffff\025" +
    "\uffff\026\uffff\027\uffff\030\uffff\056\uffff\061\013\001\002" +
    "\000\026\005\054\016\uffe0\017\051\022\043\024\042\025" +
    "\055\026\046\027\062\030\044\056\060\001\002\000\004" +
    "\016\212\001\002\000\004\023\213\001\002\000\004\054" +
    "\uffd5\001\002\000\030\005\uffd2\012\uffd2\033\uffd2\051\uffd2" +
    "\053\uffd2\054\uffd2\055\uffd2\062\uffd2\063\uffd2\064\uffd2\065" +
    "\uffd2\001\002\000\030\005\074\012\071\033\063\051\075" +
    "\053\066\054\uffd3\055\217\062\073\063\064\064\067\065" +
    "\072\001\002\000\042\032\103\033\077\034\110\035\115" +
    "\036\106\037\101\040\112\041\104\042\111\043\113\044" +
    "\105\045\107\046\102\047\100\050\114\054\uffd4\001\002" +
    "\000\004\005\220\001\002\000\030\005\uffd1\012\uffd1\033" +
    "\uffd1\051\uffd1\053\uffd1\054\uffd1\055\uffd1\062\uffd1\063\uffd1" +
    "\064\uffd1\065\uffd1\001\002\000\004\012\222\001\002\000" +
    "\016\006\006\007\012\010\014\011\010\013\uffe7\060\227" +
    "\001\002\000\004\013\235\001\002\000\004\005\234\001" +
    "\002\000\006\013\uffe5\055\uffe5\001\002\000\006\013\uffe6" +
    "\055\232\001\002\000\012\006\006\007\012\010\014\011" +
    "\010\001\002\000\004\005\231\001\002\000\006\013\uffe2" +
    "\055\uffe2\001\002\000\014\006\006\007\012\010\014\011" +
    "\010\060\227\001\002\000\006\013\uffe4\055\uffe4\001\002" +
    "\000\006\013\uffe3\055\uffe3\001\002\000\042\005\uffff\006" +
    "\006\007\012\010\014\011\010\014\237\016\uffff\017\uffff" +
    "\022\uffff\024\uffff\025\uffff\026\uffff\027\uffff\030\uffff\056" +
    "\uffff\061\013\001\002\000\026\005\054\016\uffe0\017\051" +
    "\022\043\024\042\025\055\026\046\027\062\030\044\056" +
    "\060\001\002\000\012\006\006\007\012\010\014\011\010" +
    "\001\002\000\040\005\uffff\006\006\007\012\010\014\011" +
    "\010\016\uffff\017\uffff\022\uffff\024\uffff\025\uffff\026\uffff" +
    "\027\uffff\030\uffff\056\uffff\061\013\001\002\000\026\005" +
    "\054\016\uffe0\017\051\022\043\024\042\025\055\026\046" +
    "\027\062\030\044\056\060\001\002\000\004\016\243\001" +
    "\002\000\004\015\244\001\002\000\004\054\245\001\002" +
    "\000\006\004\uffe9\015\uffe9\001\002\000\004\016\247\001" +
    "\002\000\004\015\250\001\002\000\004\054\251\001\002" +
    "\000\006\004\uffe8\015\uffe8\001\002\000\004\004\ufffb\001" +
    "\002\000\004\002\000\001\002\000\010\031\263\054\ufff4" +
    "\055\ufff4\001\002\000\006\054\257\055\256\001\002\000" +
    "\004\005\260\001\002\000\046\004\ufffa\005\ufffa\006\ufffa" +
    "\007\ufffa\010\ufffa\011\ufffa\015\ufffa\016\ufffa\017\ufffa\021" +
    "\ufffa\022\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa" +
    "\056\ufffa\061\ufffa\001\002\000\010\031\261\054\ufff3\055" +
    "\ufff3\001\002\000\024\005\074\012\071\033\063\051\075" +
    "\053\066\062\073\063\064\064\067\065\072\001\002\000" +
    "\044\032\103\033\077\034\110\035\115\036\106\037\101" +
    "\040\112\041\104\042\111\043\113\044\105\045\107\046" +
    "\102\047\100\050\114\054\ufff1\055\ufff1\001\002\000\024" +
    "\005\074\012\071\033\063\051\075\053\066\062\073\063" +
    "\064\064\067\065\072\001\002\000\044\032\103\033\077" +
    "\034\110\035\115\036\106\037\101\040\112\041\104\042" +
    "\111\043\113\044\105\045\107\046\102\047\100\050\114" +
    "\054\ufff2\055\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\012\002\004\003\006\006\010\007\003\001" +
    "\001\000\004\010\254\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\035\013\033\001\001\000\002\001" +
    "\001\000\010\003\032\006\010\007\003\001\001\000\002" +
    "\001\001\000\004\011\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\251\013\033\001\001\000\002\001\001\000\004\004" +
    "\037\001\001\000\010\003\040\006\010\007\003\001\001" +
    "\000\002\001\001\000\022\017\052\020\056\021\046\023" +
    "\044\024\060\025\055\026\051\027\047\001\001\000\004" +
    "\032\214\001\001\000\006\027\067\031\205\001\001\000" +
    "\006\027\067\031\204\001\001\000\002\001\001\000\006" +
    "\027\067\031\202\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\067\031\166\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\067\031" +
    "\157\001\001\000\002\001\001\000\022\017\155\020\056" +
    "\021\046\023\044\024\060\025\055\026\051\027\047\001" +
    "\001\000\006\027\067\031\153\001\001\000\002\001\001" +
    "\000\006\027\067\031\064\001\001\000\006\027\067\031" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\067\031\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\067\031\075\001\001\000" +
    "\002\001\001\000\006\027\067\031\133\001\001\000\006" +
    "\027\067\031\132\001\001\000\006\027\067\031\131\001" +
    "\001\000\006\027\067\031\130\001\001\000\006\027\067" +
    "\031\127\001\001\000\006\027\067\031\126\001\001\000" +
    "\006\027\067\031\125\001\001\000\006\027\067\031\124" +
    "\001\001\000\006\027\067\031\123\001\001\000\006\027" +
    "\067\031\122\001\001\000\006\027\067\031\121\001\001" +
    "\000\006\027\067\031\120\001\001\000\006\027\067\031" +
    "\117\001\001\000\006\027\067\031\116\001\001\000\006" +
    "\027\067\031\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\027\067\030\136\031\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\027\067\030\143\031\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\027" +
    "\067\030\146\031\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\067\031" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\170\006\010\007\003\001\001\000\022" +
    "\017\171\020\056\021\046\023\044\024\060\025\055\026" +
    "\051\027\047\001\001\000\004\022\173\001\001\000\010" +
    "\003\176\006\010\007\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\017\177\020\056" +
    "\021\046\023\044\024\060\025\055\026\051\027\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\207\006\010\007\003\001\001" +
    "\000\022\017\210\020\056\021\046\023\044\024\060\025" +
    "\055\026\051\027\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\067\031\215\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\223\014" +
    "\222\015\225\016\224\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\223\016\232\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\235\006\010\007\003\001\001\000\022" +
    "\017\245\020\056\021\046\023\044\024\060\025\055\026" +
    "\051\027\047\001\001\000\004\007\237\001\001\000\010" +
    "\003\240\006\010\007\003\001\001\000\022\017\241\020" +
    "\056\021\046\023\044\024\060\025\055\026\051\027\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\067\031\261\001\001\000\002\001\001\000\006\027\067" +
    "\031\263\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String msg, Object info) {
      Symbol sym = (Symbol)info;
      System.out.println(msg + ": " + symbl_name_from_id(sym.sym));
    }

    public void syntax_error(Symbol s){
        System.out.println("compiler has detected a syntax error at line " + s.left
            + " column " + s.right);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= VarDeclList FunList Main 
            {
              ProgramOp RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		VarDeclListOp vars = (VarDeclListOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int funlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ProcListOp funlist = (ProcListOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		MainOp main = (MainOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ProgramOp(vars,funlist,main);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ProgramOp start_val = (ProgramOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VarDeclList ::= 
            {
              VarDeclListOp RESULT =null;
		RESULT = new VarDeclListOp(new ArrayList<VarDeclOp>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VarDeclList ::= VarDecl VarDeclList 
            {
              VarDeclListOp RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarDeclOp varDecl = (VarDeclOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varDecListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varDecListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarDeclListOp varDecList = (VarDeclListOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = varDecList.add(varDecl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Main ::= MAIN VarDeclList StatList END MAIN SEMI 
            {
              MainOp RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		VarDeclListOp vars = (VarDeclListOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int statsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		StatListOp stats = (StatListOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		RESULT = new MainOp(vars,stats);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Main",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FunList ::= 
            {
              ProcListOp RESULT =null;
		RESULT = new ProcListOp(new ArrayList<ProcOp>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FunList ::= Fun FunList 
            {
              ProcListOp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ProcOp f = (ProcOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ProcListOp list = (ProcListOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = list.add(f);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= Type IdListInit SEMI 
            {
              VarDeclOp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TypeOp t = (TypeOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IdListInitOp list = (IdListInitOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new VarDeclOp(t, list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarDecl ::= VAR IdListInitObbl SEMI 
            {
              VarDeclOp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IdListInitOp list = (IdListInitOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarDeclOp(new TypeOp(var),list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= INTEGER 
            {
              TypeOp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new TypeOp("integer");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= BOOL 
            {
              TypeOp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new TypeOp("bool");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= REAL 
            {
              TypeOp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new TypeOp("real");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= STRING 
            {
              TypeOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new TypeOp("string");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IdListInit ::= ID 
            {
              IdListInitOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                HashMap<String,ExprOp> list = new HashMap<String,ExprOp>();
                list.put(id,new ExprOp((Operations) null));
                RESULT = new IdListInitOp(list);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdListInit",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IdListInit ::= IdListInit COMMA ID 
            {
              IdListInitOp RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		IdListInitOp list = (IdListInitOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = list.put(id,new ExprOp((Operations) null));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdListInit",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IdListInit ::= ID ASSIGN Expr 
            {
              IdListInitOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                 HashMap<String,ExprOp> list = new HashMap<String,ExprOp>();
                 list.put(id,e);
                 RESULT = new IdListInitOp(list);
             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdListInit",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IdListInit ::= IdListInit COMMA ID ASSIGN Expr 
            {
              IdListInitOp RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		IdListInitOp list = (IdListInitOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                 RESULT = list.put(id,e);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdListInit",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IdListInitObbl ::= ID ASSIGN Const 
            {
              IdListInitOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp c = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                HashMap<String,ExprOp> list = new HashMap<String,ExprOp>();
                list.put(id,c);
                RESULT = new IdListInitOp(list);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdListInitObbl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IdListInitObbl ::= IdListInitObbl COMMA ID ASSIGN Const 
            {
              IdListInitOp RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		IdListInitOp list = (IdListInitOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp c = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                 RESULT = list.put(id,c);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdListInitObbl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= INTEGER_CONST 
            {
              ExprOp RESULT =null;
		int intConstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int intConstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String intConst = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprOp(intConst);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const ::= REAL_CONST 
            {
              ExprOp RESULT =null;
		int realConstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int realConstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String realConst = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprOp(realConst);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const ::= STRING_CONST 
            {
              ExprOp RESULT =null;
		int stringConstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stringConstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String stringConst = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprOp(stringConst);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const ::= TRUE 
            {
              ExprOp RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprOp(value);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Const ::= FALSE 
            {
              ExprOp RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprOp(value);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Fun ::= FUN ID LPAR ParamDeclList RPAR COLON Type VarDeclList StatList END FUN SEMI 
            {
              ProcOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		ParamDeclListOp list = (ParamDeclListOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TypeOp t = (TypeOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		VarDeclListOp vars = (VarDeclListOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int statsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		StatListOp stats = (StatListOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		RESULT = new ProcOp(new Id(id),list,t, vars, stats);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Fun",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Fun ::= FUN ID LPAR ParamDeclList RPAR VarDeclList StatList END FUN SEMI 
            {
              ProcOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ParamDeclListOp list = (ParamDeclListOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		VarDeclListOp vars = (VarDeclListOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int statsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		StatListOp stats = (StatListOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		RESULT = new ProcOp(new Id(id),list, vars, stats);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Fun",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ParamDeclList ::= 
            {
              ParamDeclListOp RESULT =null;
		 ArrayList<ParDeclOp> l = new ArrayList<ParDeclOp>();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ParamDeclList ::= NonEmptyParamDeclList 
            {
              ParamDeclListOp RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParamDeclListOp list = (ParamDeclListOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NonEmptyParamDeclList ::= ParDecl 
            {
              ParamDeclListOp RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParDeclOp par = (ParDeclOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ArrayList<ParDeclOp> l = new ArrayList<ParDeclOp>();
         l.add(0,par);
         RESULT = new ParamDeclListOp(l);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NonEmptyParamDeclList ::= NonEmptyParamDeclList COMMA ParDecl 
            {
              ParamDeclListOp RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParamDeclListOp list = (ParamDeclListOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParDeclOp par = (ParDeclOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = list.add(par);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ParDecl ::= Type ID 
            {
              ParDeclOp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeOp t = (TypeOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ParDeclOp(t,new Id(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParDecl",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ParDecl ::= OUT Type ID 
            {
              ParDeclOp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeOp t = (TypeOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ParDeclOp("OUT",t,new Id(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParDecl",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // StatList ::= Stat StatList 
            {
              StatListOp RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatOp stat = (StatOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatListOp list = (StatListOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(stat != null){
                RESULT = list.add(stat);
                }
                else {
                    RESULT = new StatListOp();
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // StatList ::= 
            {
              StatListOp RESULT =null;
		 RESULT = new StatListOp();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Stat ::= AssignStat SEMI 
            {
              StatOp RESULT =null;
		int assignleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AssignStatOp assign = (AssignStatOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new StatOp(assign);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Stat ::= CallFun SEMI 
            {
              StatOp RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int callright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CallProcOp call = (CallProcOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new StatOp(call);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Stat ::= ReadStat SEMI 
            {
              StatOp RESULT =null;
		int readleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int readright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ReadStatOp read = (ReadStatOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new StatOp(read);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Stat ::= WriteStat SEMI 
            {
              StatOp RESULT =null;
		int writeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int writeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		WriteStatOp write = (WriteStatOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new StatOp(write);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Stat ::= WhileStat SEMI 
            {
              StatOp RESULT =null;
		int whileStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int whileStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		WhileStatOp whileStat = (WhileStatOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new StatOp(whileStat);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= IfStat SEMI 
            {
              StatOp RESULT =null;
		int ifStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ifStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IfStatOp ifStat = (IfStatOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new StatOp(ifStat);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stat ::= RETURN Expr SEMI 
            {
              StatOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExprOp e = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new StatOp(new ReturnStatOp(e));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IfStat ::= IF Expr THEN VarDeclList StatList Else END IF 
            {
              IfStatOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ExprOp e = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		VarDeclListOp vars = (VarDeclListOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		StatListOp statList = (StatListOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elseStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elseStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ElseOp elseStat = (ElseOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new IfStatOp(e,vars,statList,elseStat);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Else ::= 
            {
              ElseOp RESULT =null;
		RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Else ::= ELSE VarDeclList StatList 
            {
              ElseOp RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarDeclListOp vars = (VarDeclListOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatListOp list = (StatListOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ElseOp(vars,list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // WhileStat ::= WHILE Expr LOOP VarDeclList StatList END LOOP 
            {
              WhileStatOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ExprOp e = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		VarDeclListOp vars = (VarDeclListOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		StatListOp list = (StatListOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new WhileStatOp(e,vars,list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStat",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ReadStat ::= READ IdList Expr 
            {
              ReadStatOp RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IdListOp list = (IdListOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ReadStatOp(list,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReadStat",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ReadStat ::= READ IdList 
            {
              ReadStatOp RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IdListOp list = (IdListOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ReadStatOp(list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReadStat",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IdList ::= ID 
            {
              IdListOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           ArrayList<String> l = new ArrayList<String>();
           l.add(0,id);
           RESULT = new IdListOp(l);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdList",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IdList ::= IdList COMMA ID 
            {
              IdListOp RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		IdListOp list = (IdListOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = list.add(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdList",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // WriteStat ::= WRITE Expr 
            {
              WriteStatOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new WriteStatOp(expr,"WRITE_");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteStat",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // WriteStat ::= WRITELN Expr 
            {
              WriteStatOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new WriteStatOp(expr,"WRITE_LN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteStat",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // WriteStat ::= WRITET Expr 
            {
              WriteStatOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new WriteStatOp(expr,"WRITE_T");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteStat",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // WriteStat ::= WRITEB Expr 
            {
              WriteStatOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new WriteStatOp(expr,"WRITE_B");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteStat",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // AssignStat ::= ID ASSIGN Expr 
            {
              AssignStatOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new AssignStatOp(new Id(id),expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignStat",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CallFun ::= ID LPAR ExprList RPAR 
            {
              CallProcOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExprListOp list = (ExprListOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new CallProcOp(id,list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CallFun",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CallFun ::= ID LPAR RPAR 
            {
              CallProcOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new CallProcOp(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CallFun",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ExprList ::= Expr 
            {
              ExprListOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e1 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                ArrayList<ExprOp> l = new ArrayList<ExprOp>();
                l.add(0,e1);
                RESULT = new ExprListOp(l);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ExprList ::= Expr COMMA ExprList 
            {
              ExprListOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOp e1 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprListOp list = (ExprListOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = list.add(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ExprList ::= OUTPAR ID 
            {
              ExprListOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ArrayList<ExprOp> l = new ArrayList<ExprOp>();
               l.add(0,new ExprOp(new Id(id)));
               RESULT = new ExprListOp(l);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ExprList ::= OUTPAR ID COMMA ExprList 
            {
              ExprListOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprListOp list = (ExprListOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = list.add(new ExprOp(new Id(id)));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= TRUE 
            {
              ExprOp RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprOp(Boolean.getBoolean(value));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= FALSE 
            {
              ExprOp RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprOp(Boolean.getBoolean(value));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= INTEGER_CONST 
            {
              ExprOp RESULT =null;
		int intConstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int intConstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String intConst = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprOp(Integer.parseInt(intConst));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= REAL_CONST 
            {
              ExprOp RESULT =null;
		int realConstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int realConstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String realConst = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprOp(Float.parseFloat(realConst));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= STRING_CONST 
            {
              ExprOp RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprOp(string);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= ID 
            {
              ExprOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprOp(new Id(id));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= Expr PLUS Expr 
            {
              ExprOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOp e1 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e2 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprOp(new AddOp(e1,e2));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= Expr MINUS Expr 
            {
              ExprOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOp e1 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e2 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprOp(new DiffOp(e1,e2));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= Expr TIMES Expr 
            {
              ExprOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOp e1 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e2 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprOp(new MulOp(e1,e2));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= Expr DIV Expr 
            {
              ExprOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOp e1 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e2 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprOp(new DivOp(e1,e2));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= Expr DIVINT Expr 
            {
              ExprOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOp e1 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e2 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprOp(new DivIntOp(e1,e2));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= Expr AND Expr 
            {
              ExprOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOp e1 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e2 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprOp(new AndOp(e1,e2));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= Expr OR Expr 
            {
              ExprOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOp e1 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e2 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprOp(new OrOp(e1,e2));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= Expr GT Expr 
            {
              ExprOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOp e1 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e2 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprOp(new GtOp(e1,e2));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= Expr GE Expr 
            {
              ExprOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOp e1 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e2 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprOp(new GeOp(e1,e2));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= Expr LT Expr 
            {
              ExprOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOp e1 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e2 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprOp(new LtOp(e1,e2));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Expr LE Expr 
            {
              ExprOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOp e1 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e2 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprOp(new LeOp(e1,e2));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= Expr EQ Expr 
            {
              ExprOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOp e1 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e2 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprOp(new EqOp(e1,e2));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= Expr NE Expr 
            {
              ExprOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOp e1 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e2 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprOp(new NeOp(e1,e2));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Expr POW Expr 
            {
              ExprOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOp e1 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e2 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprOp(new PowOp(e1,e2));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Expr STR_CONCAT Expr 
            {
              ExprOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOp e1 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e2 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprOp(new StrConcatOp(e1,e2));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= MINUS Expr 
            {
              ExprOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e1 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprOp(new DiffOp(e1));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= LPAR Expr RPAR 
            {
              ExprOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExprOp e1 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ExprOp(new FunctionParamOp(e1));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= NOT Expr 
            {
              ExprOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprOp(new NotOp(e));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= CallFun 
            {
              ExprOp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CallProcOp c = (CallProcOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprOp(c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
