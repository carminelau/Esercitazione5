<?xml version="1.0" encoding="UTF-8" standalone="no"?><ProgramOp><varDeclListOp><varDecOp>integer<idListInitOp>(Id,"x")<ExprOp>(var is null</ExprOp></idListInitOp></varDecOp></varDeclListOp><procListOp><procOp>fibonacci<ParDeclListOp><ParDeclOp>(type,"integer")number</ParDeclOp></ParDeclListOp>integer<varDeclListOp/><StatListOp><IfStatOp><ExprOp><OrOp><ExprOp><EqOp><ExprOp>(Id,"number")</ExprOp><ExprOp>(Integer_const,"0")</ExprOp></EqOp></ExprOp><ExprOp><EqOp><ExprOp>(Id,"number")</ExprOp><ExprOp>(Integer_const,"1")</ExprOp></EqOp></ExprOp></OrOp></ExprOp><StatListOp><AssignStatOp>x<ExprOp>(Integer_const,"10")</ExprOp></AssignStatOp><ReturnStatOp><ExprOp>(Id,"number")</ExprOp></ReturnStatOp></StatListOp><varDeclListOp/><ElseOp><StatListOp><ReturnStatOp><ExprOp><AddOp><ExprOp><CallProcOp>
(ID,"fibonacci")
<ExprListOp><ExprOp><DiffOp><ExprOp>(Id,"number")</ExprOp><ExprOp>(Integer_const,"1")</ExprOp></DiffOp></ExprOp></ExprListOp></CallProcOp></ExprOp><ExprOp><CallProcOp>
(ID,"fibonacci")
<ExprListOp><ExprOp><DiffOp><ExprOp>(Id,"number")</ExprOp><ExprOp>(Integer_const,"2")</ExprOp></DiffOp></ExprOp></ExprListOp></CallProcOp></ExprOp></AddOp></ExprOp></ReturnStatOp></StatListOp></ElseOp></IfStatOp></StatListOp></procOp></procListOp><MainOp><varDeclListOp><varDecOp>integer<idListInitOp>(Id,"number")<ExprOp>(var is null</ExprOp></idListInitOp></varDecOp></varDeclListOp><StatListOp><WriteStatOp><ExprOp>(String_const,"Inserisci un numero:")</ExprOp></WriteStatOp><ReadStatOp><IdListOp>
(ID,"number")
</IdListOp></ReadStatOp><WriteStatOp><ExprOp><StrConcatOp><ExprOp><StrConcatOp><ExprOp><StrConcatOp><ExprOp>(String_const,"Il valore di fibonacci per il numero ")</ExprOp><ExprOp>(Id,"number")</ExprOp></StrConcatOp></ExprOp><ExprOp>(String_const," Ã¨ uguale a ")</ExprOp></StrConcatOp></ExprOp><ExprOp><CallProcOp>
(ID,"fibonacci")
<ExprListOp><ExprOp>(Id,"number")</ExprOp></ExprListOp></CallProcOp></ExprOp></StrConcatOp></ExprOp></WriteStatOp></StatListOp></MainOp></ProgramOp>